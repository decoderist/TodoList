// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoList.Identity;

#nullable disable

namespace TodoList.Identity.Migrations
{
    [DbContext(typeof(TodoListIdentityDbContext))]
    [Migration("20230616135519_InitialUserTables")]
    partial class InitialUserTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3fe6698c-b4a3-41bd-a85c-6643b9121cbc",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "aa4b854d-8f2e-42c2-8a26-e7134ed154db",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "206aea9c-6ed4-42af-9682-53ea130ea3b8",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "842d65b5-49cf-41fe-b819-a65fa83f2767",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TodoList.Application.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a58633c9-3c6a-4580-8ad1-0720b582094f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ad19ab0-3f4f-453a-bc21-de9aa1b98c92",
                            Email = "user@Email.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "UserFamily",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EMAIL.COM",
                            NormalizedUserName = "USERNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAENhpKqrgu0oZ7RfGGAgLI9U5rJte9emYS/sgL3UrZzn8gT8k7EUxnsr8caZUcLhKog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "480c7acd-c279-44d1-8b0d-2fce7b264ba2",
                            TwoFactorEnabled = false,
                            UserName = "UserName"
                        },
                        new
                        {
                            Id = "819a3de4-e36d-4f42-87fb-9ebd0d4b71c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dddaf7d-0015-47b0-97dc-fc5a0d1272df",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "AdminFamily",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL>COM",
                            NormalizedUserName = "ADMINNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAEHuiNPb1fx0LdUMyaJhvdQuSgBIL0Sgv9IkzCaTi3tvLJtEgjnzgM7jhyF+1kwacaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "612ff3ad-eca8-437c-a8d4-6869c284fbfb",
                            TwoFactorEnabled = false,
                            UserName = "AdminName"
                        },
                        new
                        {
                            Id = "3290905e-46e3-4322-994d-5b7c6bac51a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd4f635d-901c-4ca4-bf6d-5437ee94aeb7",
                            Email = "user@Email.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "UserFamily",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EMAIL.COM",
                            NormalizedUserName = "USERNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZWwZ31pAtrF8NQABfsdCc5gws3Kqa5aVl4HueHQ8tzLdzVI2aimfjpgLG2ZAZmsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a32ba9e0-48cc-45fc-8792-5a1009f32751",
                            TwoFactorEnabled = false,
                            UserName = "UserName"
                        },
                        new
                        {
                            Id = "76be9d67-32d9-4126-830d-b2c2cfa2c6b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b697c764-5f07-438a-906e-1221be8abf58",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "AdminFamily",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL>COM",
                            NormalizedUserName = "ADMINNAME",
                            PasswordHash = "AQAAAAIAAYagAAAAED6TPToWJf2lWYwIc3lDlK/eiJqRWlFxWSzyyyPtckwo1YCl+mQfFY3QBIUfSLVOyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ec78d81-94e4-4a45-b8cf-0bbb2f06ff68",
                            TwoFactorEnabled = false,
                            UserName = "AdminName"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TodoList.Application.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TodoList.Application.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoList.Application.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TodoList.Application.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
